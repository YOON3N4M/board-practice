generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
//appuser는 삭제 예정
model Appuser {
  id        Int        @id @default(autoincrement())
  username  String
  nickname  String @unique
  account   String @unique
  password  String
  memberships Membership[]
}

model Group {
  id          Int          @id @default(autoincrement())
  name        String
  map_info    String
  themes      Theme[]
  group_leader String

  memberships Membership[]
}

model Membership {
  user   Appuser   @relation(fields: [userId], references: [id])
  userId Int
  group  Group  @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([userId, groupId])

}

model Theme {
  id        Int          @id @default(autoincrement())
  name      String
  group     Group        @relation(fields: [groupId], references: [id])
  groupId   Int
  favorites Favorite[]
}

model Favorite {
  id          Int      @id @default(autoincrement())
  name        String
  placeName   String?
  theme       Theme    @relation(fields: [themeId], references: [id])
  themeId     Int
  address     String
  participants String
  //memo?
  //photo?
  //author
  //date?
  notes       Note[]
}

model Note {
  id          Int       @id @default(autoincrement())
  favorite    Favorite  @relation(fields: [favoriteId], references: [id])
  favoriteId  Int
  content     String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}