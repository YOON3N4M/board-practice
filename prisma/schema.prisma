generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Appuser {
  id       Int    @id @default(autoincrement())
  username String
  nickname String @unique
  account  String @unique
  password String
}

model Group {
  id           Int          @id @default(autoincrement())
  name         String
  map_info     String?
  group_cover  String
  group_leader String
  memberships  Membership[]
  invite       Invite[]
}

model Membership {
  userId  String
  groupId Int
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model Theme {
  id        Int        @id @default(autoincrement())
  name      String
  groupId   Int
  favorites Favorite[]
}

model Favorite {
  id           Int     @id @default(autoincrement())
  name         String
  themeId      Int
  address      String
  participants String
  author       String?
  date         String?
  memo         String?
  photo        String?
  placeName    String?
  img          Bytes?
  theme        Theme   @relation(fields: [themeId], references: [id])
  notes        Note[]
}

model Note {
  id         Int      @id @default(autoincrement())
  favoriteId Int
  content    String
  favorite   Favorite @relation(fields: [favoriteId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  name          String?
  nickname      String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  inviteCode String @unique
  groupId    Int
  expired    String
  group      Group  @relation(fields: [groupId], references: [id])
}
